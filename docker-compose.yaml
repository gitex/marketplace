services:
  # ----- infra -----
  
  kafka:
    container_name: "kafka"
    image: bitnami/kafka:latest 
    env_file: ./infra/env/.kafka.env
    ports:
      - 29092:29092
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics/sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1"]
      interval: 10s 
      timeout: 5s 
      retries: 10 

  kafka-ui:
    container_name: kafka-ui 
    env_file: ./infra/env/.kafka_ui.env
    image: provectuslabs/kafka-ui:latest 
    ports: 
      - 8081:8080 
    depends_on:
      kafka:
        condition: service_healthy

  redis:
    container_name: redis 
    image: redis:7
    ports: ["6379:6379"]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s 
      timeout: 3s 
      retries: 20 

  mailhog:
    image: mailhog/mailhog:latest 
    container_name: mailhog 
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI 

  gateway: 
    container_name: "gateway"
    image: traefik:v3.5.2
    command: ["--api.insecure=true", "--providers.docker=true", "--entrypoints.web.address=:80"]
    ports:
      - 80:80 
      - 8080:8080
    depends_on: [catalog, orders, payments, recommendations, notifications]

  # ----- templates -----
  x-database-healthcheck: &x-database-healthcheck 
    healthcheck: 
      test: ["CMD-SHELL", "pg_is_ready -U postgres -h localhost"]
      interval: 5s 
      timeout: 5s 
      retries: 20 

  # ----- databases -----
  auth-users-db:  # auth + users database-healthcheck 
    <<: [*x-database-healthcheck]
    image: postgres:16
    container_name: auth-users-db 
    env_file: ./infra/env/.auth_users_db.env.env 
    ports: ["5433:5432"]
    volumes: 
      - pgdata-auth-users:/var/lib/postgresql/data 

  orders-payments-db:  # orders + payments database-healthcheck
    <<: [*x-database-healthcheck]
    image: postgres:16
    container_name: orders-payments-db 
    env_file: ./infra/env/.orders_payments_db.env 
    ports: ["5434:5432"]
    volumes:
      - pgdata-orders-payments:/var/lib/postgresql/data 

  catalog-db:
    <<: [*x-database-healthcheck]
    image: postgres:16
    container_name: catalog-db 
    env_file: ./infra/env/.catalog.env 
    ports: ["5435:5432"]
    volumes:
      - pgdata-catalog:/var/lib/postgresql/data 

  notifications-db:
    <<: [*x-database-healthcheck]
    image: postgres:16
    container_name: notifications-db
    env_file: ./infra/env/example.notifications_db.env
    ports: ["5436:5432"]
    volumes: 
      - pgdata-notifications:/var/lib/postgresql/data 

  # ----- services -----
  auth:
    build: ./services/auth
    container_name: auth 
    env_file: ./infra/env/.auth.env 
    ports: ["8005:8080"]
    depends_on: 
      auth-users-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      kafka: { condition: service_healthy }

  users:
    build: ./services/users 
    container_name: users 
    env_file: ./infra/env/.users.env 
    ports: ["8001:8000"]
    depends_on:
      auth-users-db: { condition: service_healthy }
      kafka: { condition: service_healthy }

  catalog:
    container_name: catalog 
    build: ./services/catalog
    env_file: ./infra/env/.catalog.env 
    ports: ["8002:8000"]
    depends_on:
      catalog-db: { condition: service_healthy }
      kafka: { condition: service_healthy }

  orders:
    container_name: orders 
    build: ./services/orders 
    env_file: ./infra/env/.orders.env
    ports: ["8003:8000"]
    depends_on:
      orders-payments-db: { condition: service_healthy }
      kafka: {condition: service_healthy }
      # payments: { conditions: service_healthy }
  
  payments:
    container_name: payments
    build: ./services/payments 
    env_file: ./infra/env/.payments.env
    ports: ["8006:8080"]
    depends_on:
      orders-payments-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      kafka: { condition: service_healthy }

  notifications: 
    container_name: notifications
    build: ./services/notifications 
    env_file: ./infra/env/.notifications.env 
    ports: ["8004:8000"]
    depends_on: 
      notifications-db: { condition: service_healthy }
      kafka: { condition: service_healthy }
      mailhog: { condition: service_started }

  recommendations:
    container_name: recommendations
    build: ./services/recommendations
    env_file: ./infra/env/.recommendation.env 
    ports: ["8007:8080"]
    depends_on:
      kafka: { condition: service_healthy }


volumes:
  pgdata-auth-users:
  pgdata-orders-payments:
  pgdata-catalog:
  pgdata-notifications:



   
