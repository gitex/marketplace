x-defaults:
  x-postgres-healthcheck: &x-postgres-healthcheck
    healthcheck:
      test: ["CMD-SHELL", "1"]
      interval: 10s
      timeout: 5s
      retries: 5
  x-local-pypi-env-vars: &x-local-pypi-env-vars
    LOCAL_PYPI_URL: $LOCAL_PYPI_URL
    LOCAL_PYPI_USER: $LOCAL_PYPI_USER
    LOCAL_PYPI_PASSWORD: $LOCAL_PYPI_PASSWORD

networks:
  web: {}
  proxy:
    name: proxy

services:
  # ----- infra -----
  pypi:
    container_name: "pypi"
    image: pypiserver/pypiserver:latest
    command: -P /data/.htpasswd -a update,download,list -p 8080 /data/packages
    volumes:
      - ./pypi-data/packages:/data/packages
      - ./pypi-data/.htpasswd:/data/.htpasswd:ro
    ports:
      - "8010:8080"
    networks: [web, default]
    profiles: ["pypi"]

  kafka:
    container_name: "kafka"
    image: bitnami/kafka:latest
    env_file: ./infra/env/.kafka.env
    volumes:
      - kafka-data:/bitname/kafka
    ports:
      - 29092:29092
      - 9092:9092
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 10s
      retries: 10
      timeout: 5s
    profiles: ["users", "catalog", "auth", "notifications", "recommendations"]

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    env_file: ./infra/env/.kafka_ui.env
    ports:
      - 8081:8080
    depends_on:
      kafka:
        condition: service_healthy
    profiles: ["monitoring"]

  redis:
    container_name: redis
    image: redis:7
    ports: ["6379:6379"]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    profiles: ["auth"]

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    profiles: ["notifications"]
  #
  # gateway:
  #   container_name: "gateway"
  #   image: nginx:1.27-alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
  #   depends_on: [catalog, orders, payments, notifications]
  #   networks: [web]
  #
  prometheus:
    image: prom/prometheus:v2.53.1
    container_name: prometheus
    command:
      [
        "--config.file=/etc/prometheus/prometheus.yml",
        "--storage.tsdb.retention.time=15d",
      ]
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
    profiles: ["monitoring"]

  loki:
    image: grafana/loki:main-37eddab
    container_name: loki
    command: [
        "-config.file=/etc/loki/local-config.yml",
        # "-validation.allow-structured-metadata=false",
        "-config.expand-env=true",
      ]
    ports:
      - "3100:3100"
    volumes:
      - ./infra/loki/local-config.yml:/etc/loki/local-config.yml:ro
      - loki_data:/loki
    restart: unless-stopped
    profiles: ["monitoring"]

  promtail:
    image: grafana/promtail:main-37eddab
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./infra/promtail/config.yml:/etc/promtail/config.yml:ro
    depends_on:
      - loki
    restart: unless-stopped
    profiles: ["monitoring"]

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    ports:
      - 9100:9100
    profiles: ["monitoring"]

    # ----- databases -----
  auth-users-db: # auth + users postgres-healthcheck
    <<: [*x-postgres-healthcheck]
    image: postgres:16
    container_name: auth-users-db
    env_file: ./infra/env/.auth_users_db.env
    ports: ["5433:5432"]
    volumes:
      - pgdata-auth-users:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    profiles: ["auth", "users"]

  orders-payments-db: # orders + payments postgres-healthcheck
    <<: [*x-postgres-healthcheck]
    image: postgres:16
    container_name: orders-payments-db
    env_file: ./infra/env/.orders_payments_db.env
    ports: ["5434:5432"]
    volumes:
      - pgdata-orders-payments:/var/lib/postgresql/data
    profiles: ["orders", "payments"]

  catalog-db:
    <<: [*x-postgres-healthcheck]
    image: postgres:16
    container_name: catalog-db
    env_file: ./infra/env/.catalog.env
    ports: ["5435:5432"]
    volumes:
      - pgdata-catalog:/var/lib/postgresql/data
    profiles: ["catalog"]

  notifications-db:
    <<: [*x-postgres-healthcheck]
    image: postgres:16
    container_name: notifications-db
    env_file: ./infra/env/example.notifications_db.env
    ports: ["5436:5432"]
    volumes:
      - pgdata-notifications:/var/lib/postgresql/data
    profiles: ["notifications"]

  # ----- services -----
  auth:
    build: ./services/auth
    container_name: auth
    env_file: ./infra/env/.auth.env
    ports: ["8005:8080"]
    depends_on:
      auth-users-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      kafka: { condition: service_healthy }
    profiles: ["auth"]

  users:
    build:
      context: ./services/users
      args:
        INTERNAL_PYPI_SOURCE_URL: $INTERNAL_PYPI_SOURCE_URL
        INTERNAL_PYPI_SOURCE_NAME: $INTERNAL_PYPI_SOURCE_NAME
        INTERNAL_PYPI_SOURCE_USER: $INTERNAL_PYPI_SOURCE_USER
        INTERNAL_PYPI_SOURCE_PASSWORD: $INTERNAL_PYPI_SOURCE_PASSWORD
        # <<: [*x-local-pypi-env-vars]
    container_name: users
    env_file:
      - ./infra/env/.users.env
    volumes:
      - ./services/users:/app
    ports: ["8001:8000"]
    networks: [web]
    restart: always
    depends_on:
      auth-users-db: { condition: service_healthy }
      kafka: { condition: service_healthy }
    profiles: ["users"]
    command: "fastapi ./src/main.py"
    healthcheck:
      test: ["CMD", "sh", "-c", "./healthcheck.sh"]
      interval: 2s
      timeout: 5s
      retries: 3
      start_period: 5s

  catalog:
    container_name: catalog
    build:
      context: ./services/catalog
    env_file: ./infra/env/.catalog.env
    ports: ["8002:8000"]
    networks: [web]
    depends_on:
      catalog-db: { condition: service_healthy }
      kafka: { condition: service_healthy }
    profiles: ["catalog"]

  orders:
    container_name: orders
    build: ./services/orders
    env_file: ./infra/env/.orders.env
    ports: ["8003:8000"]
    networks: [web]
    depends_on:
      orders-payments-db: { condition: service_healthy }
      kafka: { condition: service_healthy }
      # payments: { conditions: service_healthy }
    profiles: ["orders"]

  payments:
    container_name: payments
    build: ./services/payments
    env_file: ./infra/env/.payments.env
    ports: ["8006:8080"]
    networks: [web]
    depends_on:
      orders-payments-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      kafka: { condition: service_healthy }
    profiles: ["payments"]

  notifications:
    container_name: notifications
    build: ./services/notifications
    env_file: ./infra/env/.notifications.env
    ports: ["8004:8000"]
    networks: [web]
    depends_on:
      notifications-db: { condition: service_healthy }
      kafka: { condition: service_healthy }
      mailhog: { condition: service_started }
    profiles: ["notifications"]

  recommendations:
    container_name: recommendations
    build: ./services/recommendations
    env_file: ./infra/env/.recommendation.env
    ports: ["8007:8080"]
    depends_on:
      kafka: { condition: service_healthy }
    profiles: ["recommendations"]

volumes:
  # kafka
  kafka-data:
  # infra
  prometheus_data:
  grafana_data:
  loki_data:
  # db
  pgdata-auth-users:
  pgdata-orders-payments:
  pgdata-catalog:
  pgdata-notifications:
